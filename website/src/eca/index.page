---
title: Fuse ECA Support
---

## Fuse ECA Support

The Fuse ECA project provides simple Complex Event Processing, by extending the power of Apache Camel. ECA actually stands for Event Condition Action.

An event is something that has happened, a significant change in state - e.g. a cash withdraw from an ATM, or a fault on a network.
Events are usually distributed and represented as messages, with a header property and payload. What is a complex Event? - An event that could only happen as the result of lots of other events:


In Fuse ECA, an event is a Camel Exchange. Cached and timestamped message exchanges act as an event cache. Then Camel endpoints or routes act as event channels - e.g. for the following will send an email if no events come from the endpoint activemq:topic:stock.ticker.* in 30 seconds

{pygmentize:: java}
    eca.win("30s")
		.evaluate("NOT activemq:topic:stock.ticker.* ").to("smtp://rob@localhost");
{pygmentize}

### Fuse ECA Statistics

Fuse ECA provides a Statistics Component, that uses a cache of values to generate statistics from a stream of Camel Exchanges.
The Statistics Component can measure the Mean, Min, Max, Variance, standard deviation, skewness, Kutosis and Rate. The statistics are generated
as a JSON string, and put into a Camel Exchange.

Here's an example, using a wiretap from an activemq endpoint:

{pygmentize:: java}
    from(activemq:topic.bar).wireTap("statistics:test").to("activemq:foo");
		from("statistics:test").to("mock:result");           
{pygmentize}

By default, if no values are queried, all the Number types (long, double, float, int etc) are introspected on the Camel In Message body and stats are calculated. Here's an example that uses a Simple query to just derive statistics for the queueDepth and enqueueTime on a message payload:

{pygmentize:: java}
   from("activemq:topic:foo")
    .to("statistics:foo?queryString=simple,\${body.queueDepth},$(body.enqueueTime)")
		 .to("mock:result");
{pygmentize}

You can also be selective about what type of statistics you want to be generated - in this example its just the mean, minimum and maximum:

{pygmentize:: java}
   from("activemq:topic:foo")
    .to("statistics:foo?statisticsType=mean,min,max")
		 .to("mock:result");
{pygmentize}

By default, a statistics exchange is generated every time a new event arrives at the endpoint. You can optionally batch results:

{pygmentize:: java}
   from("activemq:topic:foo")
    .to("statistics:foo?batchUpdateTime=2sec")
		 .to("mock:result");
{pygmentize}

### Fuse ECA - the EcaComponent

The Eca Component is a regular Camel component. It has access to and manages an event cache, and plugs into a Rete based event matching engine, which is used for pattern matching across those events. 

By default, the configurable event cache will hold events for a maximum of 30 seconds and up to a maximum of 1000 entries.

IT supports the follow pattern matching types:
 *AND*, *OR*, *BEFORE*, *AFTER* and *NOT*. 

Here's a quick example which looks for any event (*MessageExchange*) that will arrive at endpoint de2 after an event has arrived at endpoint de:

{pygmentize:: java}
   final DirectEndpoint de = new DirectEndpoint();
	  de.setCamelContext(context);
	  de.setEndpointUriIfNotSpecified("direct://foo");

	  final DirectEndpoint de2 = new DirectEndpoint();
	  de2.setCamelContext(context);
	  de2.setEndpointUriIfNotSpecified("direct://foo2");

	  context.addRoutes(new RouteBuilder() {
	      public void configure() throws Exception {
	           Endpoint eca = getContext()
	            .getEndpoint
	              ("eca://test?pattern=direct://foo2 After direct://foo");

	           from(de).to(eca);
	           from(de2).to(eca);
	           from(eca.getEndpointUri()).to("mock:result");
	      }
	  });
{pygmentize}

Although Camel endpoints are the more natural way of evaluating event matching patterns, you can also use routes too: e.g.:
{pygmentize:: java}
   public void configure() throws Exception {
	   Endpoint eca = getContext()
	     .getEndpoint("eca://test?pattern=testRoute2 Before testRoute1");

	   from(de).to(eca).setId("testRoute1");
	   from(de2).to(eca).setId("testRoute2");
	   from(eca.getEndpointUri()).to("mock:result");
	 }
{pygmentize}


Fuse ECA also extends the  Camel RouteBuilder, to make setting up an ECA rule slightly easier. When rules are built using the EcaRouteBuilder, it will look for rules that touch either endpoints or routes that have been defined in the CamelContext, and automatically wire up outputs on those endpoints or routes. This means you can do things like this:
{pygmentize:: java}
   context.addRoutes(new EcaRouteBuilder() {
	           
	   public void configure() throws Exception {
	       eca("test").win("30 s")
	        .evaluate("direct://foo2 After direct://foo").to("mock:result");
	    }
	  });
{pygmentize}
And the wiring of the endpoints direct://foo2 and direct://foo will happen automatically. The eca is a key word in the Fuse ECA Java DSL. In reality its an extended Camel RouteDefinition. You can use the *evaluate()* method, but an eca route also supports the pattern matching keywords as methods - so you can write things like this:
{pygmentize:: java}
   context.addRoutes(new EcaRouteBuilder() {
	           
	   public void configure() throws Exception {
	       eca("test").win("30 s")
	        .when("direct://foo2").after("direct://foo").to("mock:result");
	    }
	  });
{pygmentize}

Probably one of the most common things you want to do is event correlation - and this is stright forward, using a combination of regular camel and Fuse ECA:
{pygmentize:: java}
   public void configure() throws Exception {
	   from(de2).filter(simple("\${body.correlationID} == ID:2")).to(testEndPoint1);
	   from(de).filter(simple("\${in.body.id} == ID:2")).to(testEndPoint2);
	
	   eca("test").when(testEndPoint1).and(testEndPoint2).to("mock:result");

	 }
{pygmentize}

### Installing

Camel ECA can be installed as a feature in Fuse ESB / Karaf using the following commands:

    karaf@root> features:addurl mvn:org.fusesource.fuse/fuse-fuse/1.1-SNAPSHOT/xml/features
    karaf@root> features:install fuse-eca


### Using 

To use this module you need to use the [FUSE Mediation Router](http://fusesource.com/products/enterprise-camel) distribution. Or you could just add the following to your pom.xml, substituting the version number for the latest & greatest release.

{pygmentize:: xml}
<dependency>
  <groupId>org.fusesource.fuse</groupId>
  <artifactId>fuse-eca</artifactId>
  <version>\${fuse-version}</version>
</dependency>
{pygmentize}

And ensure you are pointing at the maven repo

{pygmentize:: xml}
    <repository>
      <id>fusesource-releases</id>
      <name>FuseSource Release Repository</name>
      <url>https://repo.fusesource.com/nexus/content/groups/public</url>
      <releases><enabled>true</enabled></releases>
      <snapshots><enabled>false</enabled></snapshots>
    </repository>
{pygmentize}

